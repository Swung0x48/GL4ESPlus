#include "../gles.h"

//GLint APIENTRY_GL4ES gl4es_glRenderMode(GLenum mode);
//void APIENTRY_GL4ES gl4es_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
void APIENTRY_GL4ES gl4es_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
//void APIENTRY_GL4ES gl4es_glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void APIENTRY_GL4ES gl4es_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
//void APIENTRY_GL4ES gl4es_glColorMaterial(GLenum face, GLenum mode);
void APIENTRY_GL4ES gl4es_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
void APIENTRY_GL4ES gl4es_glDrawBuffer(GLenum mode);
void APIENTRY_GL4ES gl4es_glEdgeFlag(GLboolean flag);
//void APIENTRY_GL4ES gl4es_glFogCoordd(GLdouble coord);
//void APIENTRY_GL4ES gl4es_glFogCoorddv(const GLdouble *coord);
//void APIENTRY_GL4ES gl4es_glFogCoordf(GLfloat coord);
//void APIENTRY_GL4ES gl4es_glFogCoordfv(const GLfloat *coord);
//void APIENTRY_GL4ES gl4es_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid * img);
//void APIENTRY_GL4ES gl4es_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
//void APIENTRY_GL4ES gl4es_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
void APIENTRY_GL4ES gl4es_glIndexf(GLfloat c);
void APIENTRY_GL4ES gl4es_glLightModeli(GLenum pname, GLint param);
void APIENTRY_GL4ES gl4es_glPolygonStipple(const GLubyte *mask);
//void APIENTRY_GL4ES gl4es_glReadBuffer(GLenum mode);
void APIENTRY_GL4ES gl4es_glSecondaryColor3f(GLfloat r, GLfloat g, GLfloat b);
void APIENTRY_GL4ES gl4es_glColorTable (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
//void APIENTRY_GL4ES gl4es_glIndexPointer(GLenum  type,  GLsizei  stride,  const GLvoid *  pointer);

void APIENTRY_GL4ES gl4es_glAccum(GLenum op, GLfloat value);
void APIENTRY_GL4ES gl4es_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities);
void APIENTRY_GL4ES gl4es_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values);
void APIENTRY_GL4ES gl4es_glPixelMapuiv(GLenum map,GLsizei mapsize, const GLuint *values);
void APIENTRY_GL4ES gl4es_glPixelMapusv(GLenum map,GLsizei mapsize, const GLushort *values);
void APIENTRY_GL4ES gl4es_glPassThrough(GLfloat token);
void APIENTRY_GL4ES gl4es_glIndexMask(GLuint mask);
void APIENTRY_GL4ES gl4es_glGetPixelMapfv(GLenum map, GLfloat *data);
void APIENTRY_GL4ES gl4es_glGetPixelMapuiv(GLenum map, GLuint *data);
void APIENTRY_GL4ES gl4es_glGetPixelMapusv(GLenum map, GLushort *data);
void APIENTRY_GL4ES gl4es_glClearIndex(GLfloat c);
void APIENTRY_GL4ES gl4es_glGetPolygonStipple(GLubyte *pattern);
void APIENTRY_GL4ES gl4es_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer);
void APIENTRY_GL4ES gl4es_glEdgeFlagv(GLboolean *flag);

// ================================ GL30 ================================

//void APIENTRY_GL4ES gl4es_glGetStringi();
//void APIENTRY_GL4ES gl4es_glClearBufferiv();
//void APIENTRY_GL4ES gl4es_glClearBufferuiv();
//void APIENTRY_GL4ES gl4es_glClearBufferfv();
//void APIENTRY_GL4ES gl4es_glClearBufferfi();
void APIENTRY_GL4ES gl4es_glVertexAttribI1i(GLuint index, GLint v0);
void APIENTRY_GL4ES gl4es_glVertexAttribI2i(GLuint index, GLint v0, GLint v1);
void APIENTRY_GL4ES gl4es_glVertexAttribI3i(GLuint index, GLint v0, GLint v1, GLint v2);
void APIENTRY_GL4ES gl4es_glVertexAttribI4i(GLuint index, GLint v0, GLint v1, GLint v2, GLint v3);
void APIENTRY_GL4ES gl4es_glVertexAttribI1ui(GLuint index, GLuint v0);
void APIENTRY_GL4ES gl4es_glVertexAttribI2ui(GLuint index, GLuint v0, GLuint v1);
void APIENTRY_GL4ES gl4es_glVertexAttribI3ui(GLuint index, GLuint v0, GLuint v1, GLuint v2);
void APIENTRY_GL4ES gl4es_glVertexAttribI4ui(GLuint index, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void APIENTRY_GL4ES gl4es_glVertexAttribI1iv(GLuint	index, const GLint *v);
void APIENTRY_GL4ES gl4es_glVertexAttribI2iv(GLuint	index, const GLint *v);
void APIENTRY_GL4ES gl4es_glVertexAttribI3iv(GLuint	index, const GLint *v);
void APIENTRY_GL4ES gl4es_glVertexAttribI4iv(GLuint	index, const GLint *v);
void APIENTRY_GL4ES gl4es_glVertexAttribI1uiv(GLuint index, const GLuint *v);
void APIENTRY_GL4ES gl4es_glVertexAttribI2uiv(GLuint index, const GLuint *v);
void APIENTRY_GL4ES gl4es_glVertexAttribI3uiv(GLuint index, const GLuint *v);
void APIENTRY_GL4ES gl4es_glVertexAttribI4uiv(GLuint index, const GLuint *v);
void APIENTRY_GL4ES gl4es_glVertexAttribI4bv(GLuint	index, const GLbyte *v);
void APIENTRY_GL4ES gl4es_glVertexAttribI4sv(GLuint	index, const GLshort *v);
void APIENTRY_GL4ES gl4es_glVertexAttribI4ubv(GLuint index, const GLubyte *v);
void APIENTRY_GL4ES gl4es_glVertexAttribI4usv(GLuint index, const GLushort *v);
//void APIENTRY_GL4ES gl4es_glVertexAttribIPointer();
void APIENTRY_GL4ES gl4es_glGetVertexAttribIiv(GLuint index, GLenum	pname, GLint *params);
void APIENTRY_GL4ES gl4es_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
void APIENTRY_GL4ES gl4es_glUniform1ui(GLint location, GLuint v0);
void APIENTRY_GL4ES gl4es_glUniform2ui(GLint location, GLuint v0, GLuint v1);
void APIENTRY_GL4ES gl4es_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
void APIENTRY_GL4ES gl4es_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void APIENTRY_GL4ES gl4es_glUniform1uiv(GLint location, GLsizei count, const GLuint *value);
void APIENTRY_GL4ES gl4es_glUniform2uiv(GLint location, GLsizei count, const GLuint *value);
void APIENTRY_GL4ES gl4es_glUniform3uiv(GLint location, GLsizei count, const GLuint *value);
void APIENTRY_GL4ES gl4es_glUniform4uiv(GLint location, GLsizei count, const GLuint *value);
void APIENTRY_GL4ES gl4es_glGetUniformuiv(GLuint program, GLint	location, GLuint *params);
//void APIENTRY_GL4ES gl4es_glBindFragDataLocation();
GLint APIENTRY_GL4ES gl4es_glGetFragDataLocation(GLuint program, const char * name);
void APIENTRY_GL4ES gl4es_glBeginConditionalRender(GLuint id, GLenum mode);
void APIENTRY_GL4ES gl4es_glEndConditionalRender(void);
//void APIENTRY_GL4ES gl4es_glMapBufferRange();
//void APIENTRY_GL4ES gl4es_glFlushMappedBufferRange();
//void APIENTRY_GL4ES gl4es_glClampColor();
//void APIENTRY_GL4ES gl4es_glIsRenderbuffer();
//void APIENTRY_GL4ES gl4es_glBindRenderbuffer();
//void APIENTRY_GL4ES gl4es_glDeleteRenderbuffers();
//void APIENTRY_GL4ES gl4es_glGenRenderbuffers();
//void APIENTRY_GL4ES gl4es_glRenderbufferStorage();
//void APIENTRY_GL4ES gl4es_glRenderbufferStorageMultisample();
//void APIENTRY_GL4ES gl4es_glGetRenderbufferParameteriv();
//void APIENTRY_GL4ES gl4es_glIsFramebuffer();
//void APIENTRY_GL4ES gl4es_glBindFramebuffer();
//void APIENTRY_GL4ES gl4es_glDeleteFramebuffers();
//void APIENTRY_GL4ES gl4es_glGenFramebuffers();
//void APIENTRY_GL4ES gl4es_glCheckFramebufferStatus();
//void APIENTRY_GL4ES gl4es_glFramebufferTexture1D();
//void APIENTRY_GL4ES gl4es_glFramebufferTexture2D();
//void APIENTRY_GL4ES gl4es_glFramebufferTexture3D();
//void APIENTRY_GL4ES gl4es_glFramebufferTextureLayer();
//void APIENTRY_GL4ES gl4es_glFramebufferRenderbuffer();
//void APIENTRY_GL4ES gl4es_glGetFramebufferAttachmentParameteriv();
//void APIENTRY_GL4ES gl4es_glBlitFramebuffer();
//void APIENTRY_GL4ES gl4es_glGenerateMipmap();
void APIENTRY_GL4ES gl4es_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params);
void APIENTRY_GL4ES gl4es_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
void APIENTRY_GL4ES gl4es_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
void APIENTRY_GL4ES gl4es_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
void APIENTRY_GL4ES gl4es_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
void APIENTRY_GL4ES gl4es_glGetBooleani_v(GLenum pname, GLuint index, GLboolean * data);
void APIENTRY_GL4ES gl4es_glGetIntegeri_v(GLenum pname, GLuint index, GLint * data);
void APIENTRY_GL4ES gl4es_glEnablei(GLenum target, GLuint index);
void APIENTRY_GL4ES gl4es_glDisablei(GLenum target, GLuint index);
GLboolean APIENTRY_GL4ES gl4es_glIsEnabledi(GLenum target, GLuint index);
void APIENTRY_GL4ES gl4es_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
//void APIENTRY_GL4ES gl4es_glBindBufferBase();
void APIENTRY_GL4ES gl4es_glBeginTransformFeedback(GLenum primitiveMode);
void APIENTRY_GL4ES gl4es_glEndTransformFeedback(void);
void APIENTRY_GL4ES gl4es_glTransformFeedbackVaryings(GLuint program, GLsizei count, const char **varyings, GLenum bufferMode);
void APIENTRY_GL4ES gl4es_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, char *name);
//void APIENTRY_GL4ES gl4es_glBindVertexArray();
//void APIENTRY_GL4ES gl4es_glDeleteVertexArrays();
//void APIENTRY_GL4ES gl4es_glGenVertexArrays();
//void APIENTRY_GL4ES gl4es_glIsVertexArray();

// ================================ GL31 ================================

//void APIENTRY_GL4ES gl4es_glDrawArraysInstanced();
//void APIENTRY_GL4ES gl4es_glDrawElementsInstanced();
//void APIENTRY_GL4ES gl4es_glCopyBufferSubData();
void APIENTRY_GL4ES gl4es_glPrimitiveRestartIndex(GLuint index);
void APIENTRY_GL4ES gl4es_glTexBuffer(GLenum target, GLenum internalFormat, GLuint buffer);
void APIENTRY_GL4ES gl4es_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar **uniformNames, GLuint *uniformIndices);
void APIENTRY_GL4ES gl4es_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
void APIENTRY_GL4ES gl4es_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
GLuint APIENTRY_GL4ES gl4es_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
void APIENTRY_GL4ES gl4es_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
void APIENTRY_GL4ES gl4es_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
void APIENTRY_GL4ES gl4es_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);

// ================================ GL32 ================================

void APIENTRY_GL4ES gl4es_glGetBufferParameteri64v(GLenum target, GLenum value, GLint64 *data);
//void APIENTRY_GL4ES gl4es_glDrawElementsBaseVertex();
//void APIENTRY_GL4ES gl4es_glDrawRangeElementsBaseVertex();
//void APIENTRY_GL4ES gl4es_glDrawElementsInstancedBaseVertex();
//void APIENTRY_GL4ES gl4es_glMultiDrawElementsBaseVertex();
void APIENTRY_GL4ES gl4es_glProvokingVertex(GLenum provokeMode);
void APIENTRY_GL4ES gl4es_glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void APIENTRY_GL4ES gl4es_glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void APIENTRY_GL4ES gl4es_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
void APIENTRY_GL4ES gl4es_glSampleMaski(GLuint maskNumber, GLbitfield mask);
void APIENTRY_GL4ES gl4es_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
//GLsync APIENTRY_GL4ES gl4es_glFenceSync(GLenum condition, GLbitfield flags);
GLboolean APIENTRY_GL4ES gl4es_glIsSync(GLsync sync);
//void APIENTRY_GL4ES gl4es_glDeleteSync(GLsync sync);
//GLenum APIENTRY_GL4ES gl4es_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
void APIENTRY_GL4ES gl4es_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
void APIENTRY_GL4ES gl4es_glGetInteger64v(GLenum pname, GLint64* params);
void APIENTRY_GL4ES gl4es_glGetInteger64i_v(GLenum target, GLuint index, GLint64* data);
void APIENTRY_GL4ES gl4es_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values);

// ================================ GL33 ================================

void APIENTRY_GL4ES gl4es_glVertexP2ui(GLenum type, GLuint value);
void APIENTRY_GL4ES gl4es_glVertexP3ui(GLenum type, GLuint value);
void APIENTRY_GL4ES gl4es_glVertexP4ui(GLenum type, GLuint value);
void APIENTRY_GL4ES gl4es_glVertexP2uiv(GLenum type, const GLuint *value);
void APIENTRY_GL4ES gl4es_glVertexP3uiv(GLenum type, const GLuint *value);
void APIENTRY_GL4ES gl4es_glVertexP4uiv(GLenum type, const GLuint *value);
void APIENTRY_GL4ES gl4es_glTexCoordP1ui(GLenum type, GLuint coords);
void APIENTRY_GL4ES gl4es_glTexCoordP2ui(GLenum type, GLuint coords);
void APIENTRY_GL4ES gl4es_glTexCoordP3ui(GLenum type, GLuint coords);
void APIENTRY_GL4ES gl4es_glTexCoordP4ui(GLenum type, GLuint coords);
void APIENTRY_GL4ES gl4es_glTexCoordP1uiv(GLenum type, const GLuint *coords);
void APIENTRY_GL4ES gl4es_glTexCoordP2uiv(GLenum type, const GLuint *coords);
void APIENTRY_GL4ES gl4es_glTexCoordP3uiv(GLenum type, const GLuint *coords);
void APIENTRY_GL4ES gl4es_glTexCoordP4uiv(GLenum type, const GLuint *coords);
void APIENTRY_GL4ES gl4es_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
void APIENTRY_GL4ES gl4es_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
void APIENTRY_GL4ES gl4es_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
void APIENTRY_GL4ES gl4es_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
void APIENTRY_GL4ES gl4es_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords);
void APIENTRY_GL4ES gl4es_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords);
void APIENTRY_GL4ES gl4es_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords);
void APIENTRY_GL4ES gl4es_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords);
void APIENTRY_GL4ES gl4es_glNormalP3ui(GLenum type, GLuint coords);
void APIENTRY_GL4ES gl4es_glNormalP3uiv(GLenum type, const GLuint *coords);
void APIENTRY_GL4ES gl4es_glColorP3ui(GLenum type, GLuint color);
void APIENTRY_GL4ES gl4es_glColorP4ui(GLenum type, GLuint color);
void APIENTRY_GL4ES gl4es_glColorP3uiv(GLenum type, const GLuint *color);
void APIENTRY_GL4ES gl4es_glColorP4uiv(GLenum type, const GLuint *color);
void APIENTRY_GL4ES gl4es_glSecondaryColorP3ui(GLenum type, GLuint color);
void APIENTRY_GL4ES gl4es_glSecondaryColorP3uiv(GLenum type, const GLuint *color);
void APIENTRY_GL4ES gl4es_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
GLint APIENTRY_GL4ES gl4es_glGetFragDataIndex(GLuint program, const GLchar *name);
//void APIENTRY_GL4ES gl4es_glGenSamplers();
//void APIENTRY_GL4ES gl4es_glDeleteSamplers();
//void APIENTRY_GL4ES gl4es_glIsSampler();
//void APIENTRY_GL4ES gl4es_glBindSampler();
//void APIENTRY_GL4ES gl4es_glSamplerParameteri();
//void APIENTRY_GL4ES gl4es_glSamplerParameterf();
//void APIENTRY_GL4ES gl4es_glSamplerParameteriv();
//void APIENTRY_GL4ES gl4es_glSamplerParameterfv();
//void APIENTRY_GL4ES gl4es_glSamplerParameterIiv();
//void APIENTRY_GL4ES gl4es_glSamplerParameterIuiv();
//void APIENTRY_GL4ES gl4es_glGetSamplerParameteriv();
//void APIENTRY_GL4ES gl4es_glGetSamplerParameterfv();
//void APIENTRY_GL4ES gl4es_glGetSamplerParameterIiv();
//void APIENTRY_GL4ES gl4es_glGetSamplerParameterIuiv();
//void APIENTRY_GL4ES gl4es_glQueryCounter();
//void APIENTRY_GL4ES gl4es_glGetQueryObjecti64v();
//void APIENTRY_GL4ES gl4es_glGetQueryObjectui64v();
//void APIENTRY_GL4ES gl4es_glVertexAttribDivisor();
void APIENTRY_GL4ES gl4es_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void APIENTRY_GL4ES gl4es_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void APIENTRY_GL4ES gl4es_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void APIENTRY_GL4ES gl4es_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void APIENTRY_GL4ES gl4es_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void APIENTRY_GL4ES gl4es_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void APIENTRY_GL4ES gl4es_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void APIENTRY_GL4ES gl4es_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);

// ================================ GL40 ================================

void APIENTRY_GL4ES gl4es_glBlendEquationi(GLuint buf, GLenum mode);
//void APIENTRY_GL4ES gl4es_glBlendEquationSeparatei();
void APIENTRY_GL4ES gl4es_glBlendFunci(GLuint buf, GLenum src, GLenum dst);
//void APIENTRY_GL4ES gl4es_glBlendFuncSeparatei();
void APIENTRY_GL4ES gl4es_glDrawArraysIndirect(GLenum mode, const void *indirect);
void APIENTRY_GL4ES gl4es_glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect);
void APIENTRY_GL4ES gl4es_glUniform1d(GLint location, GLdouble x);
void APIENTRY_GL4ES gl4es_glUniform2d(GLint location, GLdouble x, GLdouble y);
void APIENTRY_GL4ES gl4es_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
void APIENTRY_GL4ES gl4es_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY_GL4ES gl4es_glUniform1dv(GLint location, GLsizei count, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glUniform2dv(GLint location, GLsizei count, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glUniform3dv(GLint location, GLsizei count, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glUniform4dv(GLint location, GLsizei count, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glGetUniformdv(GLuint program, GLint location, GLdouble *params);
void APIENTRY_GL4ES gl4es_glMinSampleShading(GLfloat value);
GLint APIENTRY_GL4ES gl4es_glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name);
GLuint APIENTRY_GL4ES gl4es_glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name);
void APIENTRY_GL4ES gl4es_glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
void APIENTRY_GL4ES gl4es_glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
void APIENTRY_GL4ES gl4es_glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
void APIENTRY_GL4ES gl4es_glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices);
void APIENTRY_GL4ES gl4es_glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params);
void APIENTRY_GL4ES gl4es_glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
void APIENTRY_GL4ES gl4es_glPatchParameteri(GLenum pname, GLint value);
void APIENTRY_GL4ES gl4es_glPatchParameterfv(GLenum pname, const GLfloat *values);
void APIENTRY_GL4ES gl4es_glBindTransformFeedback(GLenum target, GLuint id);
void APIENTRY_GL4ES gl4es_glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
void APIENTRY_GL4ES gl4es_glGenTransformFeedbacks(GLsizei n, GLuint *ids);
GLboolean APIENTRY_GL4ES gl4es_glIsTransformFeedback(GLuint id);
void APIENTRY_GL4ES gl4es_glPauseTransformFeedback(void);
void APIENTRY_GL4ES gl4es_glResumeTransformFeedback(void);
void APIENTRY_GL4ES gl4es_glDrawTransformFeedback(GLenum mode, GLuint id);
void APIENTRY_GL4ES gl4es_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
void APIENTRY_GL4ES gl4es_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id);
void APIENTRY_GL4ES gl4es_glEndQueryIndexed(GLenum target, GLuint index);
void APIENTRY_GL4ES gl4es_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params);

// ================================ GL41 ================================

//void APIENTRY_GL4ES gl4es_glReleaseShaderCompiler();
//void APIENTRY_GL4ES gl4es_glShaderBinary();
//void APIENTRY_GL4ES gl4es_glGetShaderPrecisionFormat();
//void APIENTRY_GL4ES gl4es_glDepthRangef();
//void APIENTRY_GL4ES gl4es_glClearDepthf();
//void APIENTRY_GL4ES gl4es_glGetProgramBinary();
//void APIENTRY_GL4ES gl4es_glProgramBinary();
void APIENTRY_GL4ES gl4es_glProgramParameteri(GLuint program, GLenum pname, GLint value);
void APIENTRY_GL4ES gl4es_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
void APIENTRY_GL4ES gl4es_glActiveShaderProgram(GLuint pipeline, GLuint program);
GLuint APIENTRY_GL4ES gl4es_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings);
void APIENTRY_GL4ES gl4es_glBindProgramPipeline(GLuint pipeline);
void APIENTRY_GL4ES gl4es_glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines);
void APIENTRY_GL4ES gl4es_glGenProgramPipelines(GLsizei n, GLuint *pipelines);
GLboolean APIENTRY_GL4ES gl4es_glIsProgramPipeline(GLuint pipeline);
void APIENTRY_GL4ES gl4es_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params);
//void APIENTRY_GL4ES gl4es_glProgramUniform1i();
//void APIENTRY_GL4ES gl4es_glProgramUniform1iv();
//void APIENTRY_GL4ES gl4es_glProgramUniform1f();
//void APIENTRY_GL4ES gl4es_glProgramUniform1fv();
void APIENTRY_GL4ES gl4es_glProgramUniform1d(GLuint program, GLint location, GLdouble v0);
void APIENTRY_GL4ES gl4es_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glProgramUniform1ui(GLuint program, GLint location, GLuint v0);
void APIENTRY_GL4ES gl4es_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
//void APIENTRY_GL4ES gl4es_glProgramUniform2i();
//void APIENTRY_GL4ES gl4es_glProgramUniform2iv();
//void APIENTRY_GL4ES gl4es_glProgramUniform2f();
//void APIENTRY_GL4ES gl4es_glProgramUniform2fv();
void APIENTRY_GL4ES gl4es_glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1);
void APIENTRY_GL4ES gl4es_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1);
void APIENTRY_GL4ES gl4es_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
//void APIENTRY_GL4ES gl4es_glProgramUniform3i();
//void APIENTRY_GL4ES gl4es_glProgramUniform3iv();
//void APIENTRY_GL4ES gl4es_glProgramUniform3f();
//void APIENTRY_GL4ES gl4es_glProgramUniform3fv();
void APIENTRY_GL4ES gl4es_glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
void APIENTRY_GL4ES gl4es_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
void APIENTRY_GL4ES gl4es_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
//void APIENTRY_GL4ES gl4es_glProgramUniform4i();
//void APIENTRY_GL4ES gl4es_glProgramUniform4iv();
//void APIENTRY_GL4ES gl4es_glProgramUniform4f();
//void APIENTRY_GL4ES gl4es_glProgramUniform4fv();
void APIENTRY_GL4ES gl4es_glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
void APIENTRY_GL4ES gl4es_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void APIENTRY_GL4ES gl4es_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
//void APIENTRY_GL4ES gl4es_glProgramUniformMatrix2fv();
//void APIENTRY_GL4ES gl4es_glProgramUniformMatrix3fv();
//void APIENTRY_GL4ES gl4es_glProgramUniformMatrix4fv();
void APIENTRY_GL4ES gl4es_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY_GL4ES gl4es_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY_GL4ES gl4es_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY_GL4ES gl4es_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY_GL4ES gl4es_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY_GL4ES gl4es_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY_GL4ES gl4es_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void APIENTRY_GL4ES gl4es_glValidateProgramPipeline(GLuint pipeline);
void APIENTRY_GL4ES gl4es_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void APIENTRY_GL4ES gl4es_glVertexAttribL1d(GLuint index, GLdouble x);
void APIENTRY_GL4ES gl4es_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
void APIENTRY_GL4ES gl4es_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void APIENTRY_GL4ES gl4es_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY_GL4ES gl4es_glVertexAttribL1dv(GLuint index, const GLdouble *v);
void APIENTRY_GL4ES gl4es_glVertexAttribL2dv(GLuint index, const GLdouble *v);
void APIENTRY_GL4ES gl4es_glVertexAttribL3dv(GLuint index, const GLdouble *v);
void APIENTRY_GL4ES gl4es_glVertexAttribL4dv(GLuint index, const GLdouble *v);
void APIENTRY_GL4ES gl4es_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
void APIENTRY_GL4ES gl4es_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params);
void APIENTRY_GL4ES gl4es_glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v);
void APIENTRY_GL4ES gl4es_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
void APIENTRY_GL4ES gl4es_glViewportIndexedfv(GLuint index, const GLfloat *v);
void APIENTRY_GL4ES gl4es_glScissorArrayv(GLuint first, GLsizei count, const GLint *v);
void APIENTRY_GL4ES gl4es_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
void APIENTRY_GL4ES gl4es_glScissorIndexedv(GLuint index, const GLint *v);
void APIENTRY_GL4ES gl4es_glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v);
void APIENTRY_GL4ES gl4es_glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f);
void APIENTRY_GL4ES gl4es_glGetFloati_v(GLenum target, GLuint index, GLfloat *data);
void APIENTRY_GL4ES gl4es_glGetDoublei_v(GLenum target, GLuint index, GLdouble *data);

// ================================ GL42 ================================

void APIENTRY_GL4ES gl4es_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
void APIENTRY_GL4ES gl4es_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
void APIENTRY_GL4ES gl4es_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
void APIENTRY_GL4ES gl4es_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
void APIENTRY_GL4ES gl4es_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
void APIENTRY_GL4ES gl4es_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
//void APIENTRY_GL4ES gl4es_glMemoryBarrier(GLbitfield barriers);
//void APIENTRY_GL4ES gl4es_glTexStorage1D();
//void APIENTRY_GL4ES gl4es_glTexStorage2D();
//void APIENTRY_GL4ES gl4es_glTexStorage3D();
void APIENTRY_GL4ES gl4es_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount);
void APIENTRY_GL4ES gl4es_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);

// ================================ GL43 ================================

typedef void (APIENTRY_GL4ES *GLDEBUGPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *message, const void *userParam);

void APIENTRY_GL4ES gl4es_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
void APIENTRY_GL4ES gl4es_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
void APIENTRY_GL4ES gl4es_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
void APIENTRY_GL4ES gl4es_glDispatchComputeIndirect(GLintptr indirect);
//void APIENTRY_GL4ES gl4es_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
void APIENTRY_GL4ES gl4es_glFramebufferParameteri(GLenum target, GLenum pname, GLint param);
void APIENTRY_GL4ES gl4es_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params);
void APIENTRY_GL4ES gl4es_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
void APIENTRY_GL4ES gl4es_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
void APIENTRY_GL4ES gl4es_glInvalidateTexImage(GLuint texture, GLint level);
void APIENTRY_GL4ES gl4es_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length);
void APIENTRY_GL4ES gl4es_glInvalidateBufferData(GLuint buffer);
void APIENTRY_GL4ES gl4es_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments);
void APIENTRY_GL4ES gl4es_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY_GL4ES gl4es_glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
void APIENTRY_GL4ES gl4es_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
void APIENTRY_GL4ES gl4es_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
GLuint APIENTRY_GL4ES gl4es_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name);
void APIENTRY_GL4ES gl4es_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
void APIENTRY_GL4ES gl4es_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
GLint APIENTRY_GL4ES gl4es_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name);
GLint APIENTRY_GL4ES gl4es_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name);
void APIENTRY_GL4ES gl4es_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
void APIENTRY_GL4ES gl4es_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void APIENTRY_GL4ES gl4es_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void APIENTRY_GL4ES gl4es_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void APIENTRY_GL4ES gl4es_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
void APIENTRY_GL4ES gl4es_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void APIENTRY_GL4ES gl4es_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void APIENTRY_GL4ES gl4es_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void APIENTRY_GL4ES gl4es_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void APIENTRY_GL4ES gl4es_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex);
void APIENTRY_GL4ES gl4es_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor);
void APIENTRY_GL4ES gl4es_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
void APIENTRY_GL4ES gl4es_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
void APIENTRY_GL4ES gl4es_glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam);
GLuint APIENTRY_GL4ES gl4es_glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
void APIENTRY_GL4ES gl4es_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message);
void APIENTRY_GL4ES gl4es_glPopDebugGroup(void);
void APIENTRY_GL4ES gl4es_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
void APIENTRY_GL4ES gl4es_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
void APIENTRY_GL4ES gl4es_glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label);
void APIENTRY_GL4ES gl4es_glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);

// ================================ GL44 ================================

//void APIENTRY_GL4ES gl4es_glBufferStorage();
void APIENTRY_GL4ES gl4es_glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
void APIENTRY_GL4ES gl4es_glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
void APIENTRY_GL4ES gl4es_glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
void APIENTRY_GL4ES gl4es_glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
void APIENTRY_GL4ES gl4es_glBindTextures(GLuint first, GLsizei count, const GLuint *textures);
void APIENTRY_GL4ES gl4es_glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers);
void APIENTRY_GL4ES gl4es_glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures);
void APIENTRY_GL4ES gl4es_glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);

// ================================ GL45 ================================
/*
void APIENTRY_GL4ES gl4es_glClipControl(GLenum origin, GLenum depth);
void APIENTRY_GL4ES gl4es_glCreateTransformFeedbacks(GLsizei n, GLuint *ids);
void APIENTRY_GL4ES gl4es_glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer);
void APIENTRY_GL4ES gl4es_glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void APIENTRY_GL4ES gl4es_glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param);
void APIENTRY_GL4ES gl4es_glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param);
void APIENTRY_GL4ES gl4es_glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
void APIENTRY_GL4ES gl4es_glCreateBuffers(GLsizei n, GLuint *buffers);
void APIENTRY_GL4ES gl4es_glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
//void APIENTRY_GL4ES gl4es_glNamedBufferData();
//void APIENTRY_GL4ES gl4es_glNamedBufferSubData();
void APIENTRY_GL4ES gl4es_glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void APIENTRY_GL4ES gl4es_glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
void APIENTRY_GL4ES gl4es_glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
//void *APIENTRY_GL4ES gl4es_glMapNamedBuffer();
void APIENTRY_GL4ES gl4es_glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
//GLboolean APIENTRY_GL4ES gl4es_glUnmapNamedBuffer();
void APIENTRY_GL4ES gl4es_glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length);
//void APIENTRY_GL4ES gl4es_glGetNamedBufferParameteriv();
void APIENTRY_GL4ES gl4es_glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params);
//void APIENTRY_GL4ES gl4es_glGetNamedBufferPointerv();
//void APIENTRY_GL4ES gl4es_glGetNamedBufferSubData();
void APIENTRY_GL4ES gl4es_glCreateFramebuffers(GLsizei n, GLuint *framebuffers);
void APIENTRY_GL4ES gl4es_glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void APIENTRY_GL4ES gl4es_glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param);
void APIENTRY_GL4ES gl4es_glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
void APIENTRY_GL4ES gl4es_glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
void APIENTRY_GL4ES gl4es_glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf);
//void APIENTRY_GL4ES gl4es_glNamedFramebufferDrawBuffers();
void APIENTRY_GL4ES gl4es_glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src);
void APIENTRY_GL4ES gl4es_glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
void APIENTRY_GL4ES gl4es_glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
//void APIENTRY_GL4ES gl4es_glClearNamedFramebufferiv();
//void APIENTRY_GL4ES gl4es_glClearNamedFramebufferuiv();
//void APIENTRY_GL4ES gl4es_glClearNamedFramebufferfv();
//void APIENTRY_GL4ES gl4es_glClearNamedFramebufferfi();
void APIENTRY_GL4ES gl4es_glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLenum APIENTRY_GL4ES gl4es_glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target);
void APIENTRY_GL4ES gl4es_glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param);
void APIENTRY_GL4ES gl4es_glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
void APIENTRY_GL4ES gl4es_glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers);
void APIENTRY_GL4ES gl4es_glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
void APIENTRY_GL4ES gl4es_glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void APIENTRY_GL4ES gl4es_glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params);
void APIENTRY_GL4ES gl4es_glCreateTextures(GLenum target, GLsizei n, GLuint *textures);
void APIENTRY_GL4ES gl4es_glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer);
void APIENTRY_GL4ES gl4es_glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void APIENTRY_GL4ES gl4es_glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
void APIENTRY_GL4ES gl4es_glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
void APIENTRY_GL4ES gl4es_glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
void APIENTRY_GL4ES gl4es_glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void APIENTRY_GL4ES gl4es_glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
//void APIENTRY_GL4ES gl4es_glTextureSubImage1D();
//void APIENTRY_GL4ES gl4es_glTextureSubImage2D();
//void APIENTRY_GL4ES gl4es_glTextureSubImage3D();
//void APIENTRY_GL4ES gl4es_glCompressedTextureSubImage1D();
//void APIENTRY_GL4ES gl4es_glCompressedTextureSubImage2D();
//void APIENTRY_GL4ES gl4es_glCompressedTextureSubImage3D();
//void APIENTRY_GL4ES gl4es_glCopyTextureSubImage1D();
//void APIENTRY_GL4ES gl4es_glCopyTextureSubImage2D();
//void APIENTRY_GL4ES gl4es_glCopyTextureSubImage3D();
//void APIENTRY_GL4ES gl4es_glTextureParameterf();
//void APIENTRY_GL4ES gl4es_glTextureParameterfv();
//void APIENTRY_GL4ES gl4es_glTextureParameteri();
void APIENTRY_GL4ES gl4es_glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params);
void APIENTRY_GL4ES gl4es_glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params);
//void APIENTRY_GL4ES gl4es_glTextureParameteriv();
void APIENTRY_GL4ES gl4es_glGenerateTextureMipmap(GLuint texture);
void APIENTRY_GL4ES gl4es_glBindTextureUnit(GLuint unit, GLuint texture);
//void APIENTRY_GL4ES gl4es_glGetTextureImage();
//void APIENTRY_GL4ES gl4es_glGetCompressedTextureImage();
//void APIENTRY_GL4ES gl4es_glGetTextureLevelParameterfv();
//void APIENTRY_GL4ES gl4es_glGetTextureLevelParameteriv();
//void APIENTRY_GL4ES gl4es_glGetTextureParameterfv();
void APIENTRY_GL4ES gl4es_glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params);
void APIENTRY_GL4ES gl4es_glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params);
//void APIENTRY_GL4ES gl4es_glGetTextureParameteriv();
void APIENTRY_GL4ES gl4es_glCreateVertexArrays(GLsizei n, GLuint *arrays);
//void APIENTRY_GL4ES gl4es_glDisableVertexArrayAttrib();
//void APIENTRY_GL4ES gl4es_glEnableVertexArrayAttrib();
void APIENTRY_GL4ES gl4es_glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer);
void APIENTRY_GL4ES gl4es_glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void APIENTRY_GL4ES gl4es_glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
void APIENTRY_GL4ES gl4es_glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
void APIENTRY_GL4ES gl4es_glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void APIENTRY_GL4ES gl4es_glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void APIENTRY_GL4ES gl4es_glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void APIENTRY_GL4ES gl4es_glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor);
void APIENTRY_GL4ES gl4es_glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param);
void APIENTRY_GL4ES gl4es_glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
void APIENTRY_GL4ES gl4es_glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
void APIENTRY_GL4ES gl4es_glCreateSamplers(GLsizei n, GLuint *samplers);
void APIENTRY_GL4ES gl4es_glCreateProgramPipelines(GLsizei n, GLuint *pipelines);
void APIENTRY_GL4ES gl4es_glCreateQueries(GLenum target, GLsizei n, GLuint *ids);
void APIENTRY_GL4ES gl4es_glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void APIENTRY_GL4ES gl4es_glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void APIENTRY_GL4ES gl4es_glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void APIENTRY_GL4ES gl4es_glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void APIENTRY_GL4ES gl4es_glMemoryBarrierByRegion(GLbitfield barriers);
void APIENTRY_GL4ES gl4es_glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
void APIENTRY_GL4ES gl4es_glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
GLenum APIENTRY_GL4ES gl4es_glGetGraphicsResetStatus(void);
void APIENTRY_GL4ES gl4es_glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
void APIENTRY_GL4ES gl4es_glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
void APIENTRY_GL4ES gl4es_glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
void APIENTRY_GL4ES gl4es_glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
void APIENTRY_GL4ES gl4es_glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params);
void APIENTRY_GL4ES gl4es_glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
void APIENTRY_GL4ES gl4es_glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
void APIENTRY_GL4ES gl4es_glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
void APIENTRY_GL4ES gl4es_glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
void APIENTRY_GL4ES gl4es_glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
void APIENTRY_GL4ES gl4es_glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat *values);
void APIENTRY_GL4ES gl4es_glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint *values);
void APIENTRY_GL4ES gl4es_glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort *values);
void APIENTRY_GL4ES gl4es_glGetnPolygonStipple(GLsizei bufSize, GLubyte *pattern);
void APIENTRY_GL4ES gl4es_glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
void APIENTRY_GL4ES gl4es_glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
void APIENTRY_GL4ES gl4es_glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
void APIENTRY_GL4ES gl4es_glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
void APIENTRY_GL4ES gl4es_glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
void APIENTRY_GL4ES gl4es_glTextureBarrier(void);

// ================================ GL46 ================================

void APIENTRY_GL4ES gl4es_glSpecializeShader(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
void APIENTRY_GL4ES gl4es_glMultiDrawArraysIndirectCount(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
void APIENTRY_GL4ES gl4es_glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
void APIENTRY_GL4ES gl4es_glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp);*/